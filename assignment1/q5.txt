Errors in a computer program can be classified according to when they are detected and, if they are detected at compile time, what part of the compiler detects them. Using your favorite imperative language, give an example of each of the following.
(a) A lexical error, detected by the scanner
public static int`ty main(String[] args)
{
	...
}
It's a lexical error to have an invalid return type (int`ty isn't a real thing)

(b) A syntax error, detected by the parser
public static void main(String[] args)
{
	int a = 6
	int b = 5;
}
This is a syntax error because you did not end the first int statement with a semi-colon, against Java's grammar rules and will not compile.

(c) A static semantic error, detected by semantic analysis
public static void main(String[] args)
{
	int a = "hello";
}
This is a static semantic because you are assigning a string to an integer.

(d) A dynamic semantic error, detected by code generated by the compiler
public static void main(String[] args)
{
	System.out.println(divide(100, 0));
}

public static int divide(int a, int b)
{
	return a / b;
}
This is a dynamic semantic error because you cannot divide by zero, but the program is unable to determine that this type of error will occur at compile time.

(e) An error that the compiler can neither catch nor easily generate code to catch (this should be a violation of the language definition, not just a program bug)
in C++:
void ClassName::ClassName()
{
	int a[10];
	a[11] = 30;
}
This is an error that can't be caught becauase you can index an array in several ways, and this is an unsafe check. It is undefined behavior what will happen in this sutaiton.