Zachary Halpern
Peter Golden
Jack Burns

1) Page 167 Ex. 3.1 Binding time for each:
a. number of built in functions (math, type queries, etc):  Language Design time
b. variable declaration corresponding to a certain variable reference/use: Program writing time
c. max length allowed for a string literal: Language Implementation time
d. referencing environment for a subroutine passed as a parameter: Run time		
e. address of a particular library subroutine:	Load time
f. total amount of space occupied by program code and data: Load time (if program doesn't  create new objects conditionally), run time (if it does) 

2a) 
Ex: powF(3, 2).

HIGH ADDRESSES (0xFFFFFF)
[powF(3, 2) -- Subroutine A]
[Return Address of first call]
<bookkeeping>
[arg1 (3)]
[arg2 (3)]
[local retVal = 3*B]

[powF(2, 2) -- Subroutine B]
[Return Address of second call]
<bookkeeping>
[arg1 (2)]
[arg2 (2)]
[local retVal2 = 2*C]

[powF(1, 2) -- Subroutine C]
[Return Address of third call]
<bookkeeping>
[arg1 (1)]
[arg2 (2)]
[local retVal3 = 1*D]

[powF(0, 2) -- Subroutine D]
[Return Address of fourth call]
<bookkeeping>
[arg1 (0)]
[arg2 (2)]
[1]

LOW ADDRESSES (0x000000)

b) The program stack grows from higher addresses to lower addresses

c) SEE ATTACHED powF.S FILE

3) The recursive powF works a bit differently, instead calling a sub-routine and updating the stack in-place. The non-optimized code kept creating new subroutine calls whereas this implementation adds a simple for loop to the equation.

4)

5)

6) Page 124 CYU #4
The difference between the lifetime of a name-to-object binding and its visibility is that its lifetime encapsulates all the time between the binding's creation and estruction, while its visibility describes whether or not that certain binding will be used. For instance, if a global and local variable share the same name, within the local variable's scope, the global variable's binding is invisible and cannot be accessed.

Page 135 CYU #12
The scope of a name-to-object binding refers to the section of code in which that binding is visible.

Page 167 Ex. 3.4
1. When a subroutine is called with a local variable with the same name
2. variables declared in a code block (for/while loops, conditionals, simple code blocks with {}) with identical names as other variables
3. local variables with the same name as global variables
